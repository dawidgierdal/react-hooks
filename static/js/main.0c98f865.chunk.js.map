{"version":3,"sources":["components/MyResponsiveComponent.js","components/useWindowWidth.js","components/SetName.js","components/GetSomeData.js","components/Counter.js","components/CounterWrapper.js","App.js","serviceWorker.js","index.js"],"names":["MyResponsiveComponent","react_default","a","createElement","_useState","useState","window","innerWidth","_useState2","Object","slicedToArray","width","setWidth","useEffect","handleResize","addEventListener","removeEventListener","useWindowWidth","SButton","styled","button","_templateObject","SInput","input","_templateObject2","SForm","form","_templateObject3","SetName","inputValue","setValue","_useState3","_useState4","name","setName","onChange","event","target","value","type","onClick","preventDefault","SGetSomeData","div","GetSomeData_templateObject","GetSomeData","users","setUsers","axios","then","response","data","results","map","user","concat","first","last","username","login","email","image","picture","thumbnail","key","className","src","alt","Counter","_useContext","useContext","CountContext","count","increase","decrease","React","createContext","CounterWrapper","setCount","Fragment","Provider","Counter_Counter","SApp","App_templateObject","App","MyResponsiveComponent_MyResponsiveComponent","SetName_SetName","GetSomeData_GetSomeData","CounterWrapper_CounterWrapper","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c98f865.chunk.js","sourcesContent":["import React from 'react';\nimport { useWindowWidth } from \"./useWindowWidth\";\n\nexport const MyResponsiveComponent = () => (\n    <div>\n        Window width is {useWindowWidth()}\n    </div>\n);","import { useState, useEffect } from 'react';\n\nexport const useWindowWidth = () => {\n    const [width, setWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        const handleResize = () => setWidth(window.innerWidth);\n        window.addEventListener('resize', handleResize)\n        return () => {\n            window.removeEventListener('resize', handleResize)\n        }\n    });\n\n    return width;\n};\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst SButton = styled.button`\n    background-image: linear-gradient(to top left,#ff8a00,#da1b60);\n    border: 0;\n    border-radius: 2rem;\n    color: #fff;\n    display: block;\n    font-weight: 700;\n    padding: .5rem 1rem;\n    transition: 70ms;\n    width: 100px;\n`;\n\nconst SInput = styled.input`\n    width: 300px;\n    height: 40px;\n    padding: 5px;\n    margin-bottom: 25px;\n`;\n\nconst SForm = styled.form`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 25px;\n`;\n\nexport const SetName = () => {\n    const [inputValue, setValue] = useState('');\n    const [name, setName] = useState('Jack');\n\n    const handleInput = (event) => {\n        setValue(event.target.value)\n    };\n\n    const updateName = (event) => {\n        event.preventDefault();\n        setName(inputValue);\n    };\n\n    return (\n        <SForm>\n            <p>Hi, {name}!</p>\n            <SInput onChange={handleInput}/>\n            <SButton type=\"submit\" onClick={updateName}>Save</SButton>\n        </SForm>\n    )\n};\n\n","import React, { useState, useEffect }  from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst SGetSomeData = styled.div`\n    height: 500px;\n    width: 800px;\n    margin-bottom: 25px;\n    overflow-y: scroll;\n    \n    .users {\n      color: #fff;\n    }\n    \n    .users__user {\n      background: #222;\n      box-shadow: 0 5px 10px rgba(0, 0, 0, .3);\n      display: grid;\n      grid-template-columns: 100px auto;\n    }\n    \n    .users__user:after {\n      content: \"\";\n      background-image: linear-gradient(to top left,#ff8a00,#da1b60);\n      grid-column: span 2;\n      height: 3px;\n      position: relative;\n      width: 100%;\n    }\n    \n    .users__avatar {\n      min-width: 100px;\n    }\n    \n    .users__meta {\n      margin-left: 1em;\n      padding-right: 1em;\n    }\n    \n    .users h1 {\n      line-height: 0;\n    }\n`;\n\nexport const GetSomeData = () => {\n    const [users, setUsers] = useState([]);\n    useEffect(() => {\n        axios(\"https://randomuser.me/api/?results=10\")\n            .then(response =>\n                response.data.results.map(user => ({\n                    name: `${user.name.first} ${user.name.last}`,\n                    username: `${user.login.username}`,\n                    email: `${user.email}`,\n                    image: `${user.picture.thumbnail}`\n                })))\n            .then(data => {\n                setUsers(data);\n            })\n    }, []);\n\n    return (\n        <SGetSomeData>\n            {users.map(user => (\n                <div key={user.username} className=\"users__user\">\n                    <img src={user.image} className=\"users__avatar\" alt='' />\n                    <div className=\"users__meta\">\n                        <h1>{user.name}</h1>\n                        <p>{user.email}</p>\n                    </div>\n                </div>\n            ))}\n        </SGetSomeData>\n    )\n};","import React, { useContext } from 'react';\nimport { CountContext } from \"./CounterWrapper\";\n\nexport const Counter = () => {\n    const { count, increase, decrease } = useContext(CountContext);\n    return (\n        <div>\n            <button onClick={decrease}>-</button>\n            <div className=\"count\">{count}</div>\n            <button onClick={increase}>+</button>\n        </div>\n    );\n};","import React, { useState } from 'react';\nimport { Counter } from './Counter';\nexport const CountContext = React.createContext();\n\nexport const CounterWrapper = () => {\n    const [count, setCount] = useState(0);\n\n    const increase = () => {\n        setCount(count + 1)\n    };\n    const decrease = () => {\n        setCount(count - 1)\n    };\n\n    return (\n        <React.Fragment>\n            <CountContext.Provider\n                value={{ count, increase, decrease }}\n            >\n                <Counter />\n            </CountContext.Provider>\n        </React.Fragment>\n    )\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { MyResponsiveComponent } from \"./components/MyResponsiveComponent\";\nimport { SetName } from \"./components/SetName\";\nimport { GetSomeData } from \"./components/GetSomeData\";\nimport { CounterWrapper } from \"./components/CounterWrapper\";\n\nconst SApp = styled.div`\n    background-color: #282c34;\n    min-height: 100vh;\n    font-size: calc(10px + 2vmin);\n    color: white;  \n`;\n\nfunction App() {\n  return (\n    <SApp className=\"App\">\n        <MyResponsiveComponent />\n        <SetName />\n        <GetSomeData />\n        <CounterWrapper />\n    </SApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}